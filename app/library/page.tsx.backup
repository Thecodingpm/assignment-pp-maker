'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import UploadImagesModal from '../components/UploadImagesModal';
import UploadFontsModal from '../components/UploadFontsModal';
import ImagePreviewModal from '../components/ImagePreviewModal';

export default function LibraryPage() {
  const [activeSection, setActiveSection] = useState('templates');
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [isUploadFontsModalOpen, setIsUploadFontsModalOpen] = useState(false);
  const [images, setImages] = useState<any[]>([]);
  const [fonts, setFonts] = useState<any[]>([]);
  const [googleFonts, setGoogleFonts] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedImage, setSelectedImage] = useState<any>(null);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [renamingImage, setRenamingImage] = useState<string | null>(null);
  const [newImageName, setNewImageName] = useState('');
  const [fontSearchQuery, setFontSearchQuery] = useState('');
  const [fontCategory, setFontCategory] = useState('all');

  const handleUpload = (files: File[]) => {
    console.log('Uploaded files:', files);
    // Refresh images after upload
    fetchImages();
    setIsUploadModalOpen(false);
  };

  const handleFontUpload = (uploadedFonts: any[]) => {
    console.log('Uploaded fonts:', uploadedFonts);
    // Refresh fonts after upload
    fetchFonts();
    setIsUploadFontsModalOpen(false);
  };

  const fetchImages = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/get-images');
      const data = await response.json();
      if (data.success) {
        // Add format and upload time to each image
        const imagesWithDetails = data.images.map((image: any) => ({
          ...image,
          format: image.name.split('.').pop()?.toUpperCase() || 'Unknown',
          uploadTime: getTimeAgo(image.lastModified)
        }));
        setImages(imagesWithDetails);
      }
    } catch (error) {
      console.error('Error fetching images:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchFonts = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/get-fonts');
      const data = await response.json();
      if (data.success) {
        setFonts(data.fonts);
      }
    } catch (error) {
      console.error('Error fetching fonts:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchGoogleFonts = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        sort: 'popularity',
        ...(fontCategory !== 'all' && { category: fontCategory }),
        ...(fontSearchQuery && { search: fontSearchQuery })
      });
      
      const response = await fetch(`/api/google-fonts?${params}`);
      const data = await response.json();
      if (data.success) {
        setGoogleFonts(data.fonts);
      }
    } catch (error) {
      console.error('Error fetching Google Fonts:', error);
    } finally {
      setLoading(false);
    }
  };

  const getTimeAgo = (dateString: string) => {
    const now = new Date();
    const uploadDate = new Date(dateString);
    const diffInMinutes = Math.floor((now.getTime() - uploadDate.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
  };

  const handleImageClick = (image: any) => {
    setSelectedImage(image);
    setIsPreviewModalOpen(true);
  };

  const handleRename = async (imageId: string, newName: string) => {
    // For now, just update the local state
    // In a real app, you'd make an API call to rename the file in S3
    setImages(images.map(img => 
      img.id === imageId ? { ...img, name: newName } : img
    ));
    setRenamingImage(null);
    setNewImageName('');
  };

  const startRename = (image: any) => {
    setRenamingImage(image.id);
    setNewImageName(image.name);
    setActiveDropdown(null);
  };

  const cancelRename = () => {
    setRenamingImage(null);
    setNewImageName('');
  };

  const confirmRename = () => {
    if (newImageName.trim() && renamingImage) {
      handleRename(renamingImage, newImageName.trim());
    }
  };

  const handleDelete = async (imageId: string) => {
    try {
      const image = images.find(img => img.id === imageId);
      if (!image) {
        console.error('Image not found');
        return;
      }

      console.log('Deleting image:', image.id);
      console.log('Full S3 key:', image.id);
      
      const response = await fetch(`/api/delete-image?key=${encodeURIComponent(image.id)}`, {
        method: 'DELETE',
      });

      console.log('Delete response status:', response.status);

      if (response.ok) {
        console.log('Image deleted successfully from S3');
        setImages(images.filter(img => img.id !== imageId));
        setActiveDropdown(null);
        console.log('Image removed from UI');
      } else {
        const errorData = await response.json();
        console.error('Failed to delete image:', errorData);
        alert('Failed to delete image. Please try again.');
      }
    } catch (error) {
      console.error('Error deleting image:', error);
      alert('Error deleting image. Please try again.');
    }
  };

  // Fetch images when component mounts and when switching to images section
  useEffect(() => {
    if (activeSection === 'images') {
      fetchImages();
    } else if (activeSection === 'fonts') {
      fetchFonts();
    } else if (activeSection === 'google-fonts') {
      fetchGoogleFonts();
    }
  }, [activeSection, fontSearchQuery, fontCategory]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (activeDropdown) {
        setActiveDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [activeDropdown]);

  const sections = [
    { 
      id: 'templates', 
      label: 'Templates', 
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
        </svg>
      )
    },
    { 
      id: 'fonts', 
      label: 'Fonts', 
      icon: (
        <span className="w-4 h-4 flex items-center justify-center text-sm font-bold">T</span>
      )
    },
    { 
      id: 'images', 
      label: 'Images', 
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      )
    },
    { 
      id: 'videos', 
      label: 'Videos', 
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
        </svg>
      )
    }
  ];

  const renderContent = () => {
    switch (activeSection) {
      case 'templates':
        return (
          <div className="text-center py-20">
            <div className="w-32 h-32 mx-auto mb-8 bg-blue-50 rounded-2xl flex items-center justify-center">
              <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                </svg>
              </div>
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Build with professional templates</h2>
            <p className="text-gray-600 max-w-md mx-auto mb-8">
              Choose from our collection of professionally designed templates. Your library makes it easy for anyone to create stunning presentations.
            </p>
            <button className="bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-colors">
              Browse templates
            </button>
          </div>
        );
      case 'fonts':
        return (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">My Fonts</h2>
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setActiveSection('google-fonts');
                    fetchGoogleFonts();
                  }}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                  <span>Browse Google Fonts</span>
                </button>
                <button
                  onClick={() => {
                    console.log('Upload fonts button clicked');
                    setIsUploadFontsModalOpen(true);
                  }}
                  className="bg-purple-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <span>Upload Fonts</span>
                </button>
              </div>
            </div>

            {loading ? (
              <div className="text-center py-20">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading fonts...</p>
              </div>
            ) : fonts.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {fonts.map((font) => (
                  <div key={font.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-1">{font.family}</h3>
                        <p className="text-sm text-gray-500">{font.format.toUpperCase()}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {font.weight}
                        </span>
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {font.style}
                        </span>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div 
                        className="text-2xl font-medium text-gray-900"
                        style={{ fontFamily: font.family, fontWeight: font.weight, fontStyle: font.style }}
                      >
                        Aa Bb Cc
                      </div>
                      <div 
                        className="text-sm text-gray-600 mt-2"
                        style={{ fontFamily: font.family, fontWeight: font.weight, fontStyle: font.style }}
                      >
                        The quick brown fox jumps over the lazy dog
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{(font.size / 1024).toFixed(1)} KB</span>
                      <span>{new Date(font.uploadDate).toLocaleDateString()}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-20">
                <div className="w-32 h-32 mx-auto mb-8 bg-purple-50 rounded-2xl flex items-center justify-center">
                  <div className="w-16 h-16 bg-purple-100 rounded-xl flex items-center justify-center">
                    <svg className="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">No fonts uploaded yet</h3>
                <p className="text-sm text-gray-500 mb-6">Upload your custom font files to get started</p>
                <button
                  onClick={() => setIsUploadFontsModalOpen(true)}
                  className="bg-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center gap-2 mx-auto"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  <span>Upload Fonts</span>
                </button>
              </div>
            )}
          </div>
        );
      case 'images':
        return (
          <div>
            {loading ? (
              <div className="text-center py-20">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading images...</p>
              </div>
            ) : images.length > 0 ? (
              <div>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {images.map((image) => (
                    <div 
                      key={image.id} 
                      className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow group relative"
                    >
                      {/* Image with overlay */}
                      <div className="relative">
                        <img
                          src={image.url}
                          alt={image.name}
                          className="w-full h-48 object-cover cursor-pointer"
                          onClick={() => handleImageClick(image)}
                          onError={(e) => {
                            e.currentTarget.src = '/placeholder-image.png';
                          }}
                        />
                        
                        {/* Three dots menu overlay */}
                        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                          <div className="relative">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                console.log('Three dots clicked for image:', image.id);
                                setActiveDropdown(activeDropdown === image.id ? null : image.id);
                              }}
                              className="p-1.5 bg-white/90 hover:bg-white rounded-full shadow-sm hover:shadow-md transition-all"
                            >
                              <svg className="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                              </svg>
                            </button>
                            
                            {/* Dropdown menu */}
                            {activeDropdown === image.id && (
                              <div className="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border border-gray-200 z-20">
                                <div className="py-1">
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      console.log('Rename clicked for image:', image.id);
                                      startRename(image);
                                    }}
                                    className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                  >
                                    Rename
                                  </button>
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      console.log('Delete button clicked for image:', image.id);
                                      if (window.confirm('Are you sure you want to delete this image?')) {
                                        console.log('User confirmed deletion');
                                        handleDelete(image.id);
                                      } else {
                                        console.log('User cancelled deletion');
                                      }
                                    }}
                                    className="w-full text-left px-3 py-2 text-sm text-red-600 hover:bg-gray-100"
                                  >
                                    Delete
                                  </button>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="p-3">
                        {renamingImage === image.id ? (
                          <div className="space-y-2">
                            <input
                              type="text"
                              value={newImageName}
                              onChange={(e) => setNewImageName(e.target.value)}
                              onKeyPress={(e) => {
                                if (e.key === 'Enter') confirmRename();
                                if (e.key === 'Escape') cancelRename();
                              }}
                              className="w-full text-sm border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              autoFocus
                            />
                            <div className="flex space-x-1">
                              <button
                                onClick={confirmRename}
                                className="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600"
                              >
                                Save
                              </button>
                              <button
                                onClick={cancelRename}
                                className="text-xs bg-gray-300 text-gray-700 px-2 py-1 rounded hover:bg-gray-400"
                              >
                                Cancel
                              </button>
                            </div>
                          </div>
                        ) : (
                          <p className="text-sm text-gray-600 truncate font-medium" title={image.name}>
                            {image.name}
                          </p>
                        )}
                        <div className="flex items-center justify-between mt-1">
                          <span className="text-xs text-gray-500 font-medium">
                            {image.format}
                          </span>
                          <span className="text-xs text-gray-400">
                            {(image.size / 1024).toFixed(1)} KB
                          </span>
                        </div>
                        <p className="text-xs text-gray-400 mt-1">
                          Added {image.uploadTime}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="text-center py-20">
                {/* 3D Folder Icon */}
                <div className="w-32 h-32 mx-auto mb-8 relative">
                  {/* Main folder */}
                  <div className="w-24 h-20 bg-blue-100 rounded-lg shadow-lg transform rotate-3">
                    {/* Cards coming out of folder */}
                    <div className="absolute -top-2 -right-2 w-16 h-12 bg-purple-500 rounded-lg shadow-md transform -rotate-6 flex items-center justify-center">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div className="absolute -top-1 -right-4 w-14 h-10 bg-purple-700 rounded-lg shadow-md transform -rotate-12 flex items-center justify-center">
                      <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                  </div>
                </div>
                
                <h2 className="text-2xl font-bold text-gray-900 mb-4">Photos and logos and GIFs — oh my!</h2>
                <p className="text-gray-600 max-w-md mx-auto mb-8">
                  Upload images here so everyone on your team can use them.
                </p>
                <button 
                  onClick={() => setIsUploadModalOpen(true)}
                  className="bg-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center space-x-2 mx-auto"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  <span>Upload images</span>
                </button>
              </div>
            )}
          </div>
        );
      case 'fonts':
        return (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">My Fonts</h2>
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setActiveSection('google-fonts');
                    fetchGoogleFonts();
                  }}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                  <span>Browse Google Fonts</span>
                </button>
                <button
                  onClick={() => {
                    console.log('Upload fonts button clicked');
                    setIsUploadFontsModalOpen(true);
                  }}
                  className="bg-purple-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center gap-2"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  <span>Upload Fonts</span>
                </button>
              </div>
            </div>

            {loading ? (
              <div className="text-center py-20">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading fonts...</p>
              </div>
            ) : fonts.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {fonts.map((font) => (
                  <div key={font.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-1">{font.family}</h3>
                        <p className="text-sm text-gray-500">{font.format.toUpperCase()}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {font.weight}
                        </span>
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {font.style}
                        </span>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div 
                        className="text-2xl font-medium text-gray-900"
                        style={{ fontFamily: font.family, fontWeight: font.weight, fontStyle: font.style }}
                      >
                        Aa Bb Cc
                      </div>
                      <div 
                        className="text-sm text-gray-600 mt-2"
                        style={{ fontFamily: font.family, fontWeight: font.weight, fontStyle: font.style }}
                      >
                        The quick brown fox jumps over the lazy dog
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{(font.size / 1024).toFixed(1)} KB</span>
                      <span>{new Date(font.uploadDate).toLocaleDateString()}</span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-20">
                <div className="w-32 h-32 mx-auto mb-8 bg-purple-50 rounded-2xl flex items-center justify-center">
                  <div className="w-16 h-16 bg-purple-100 rounded-xl flex items-center justify-center">
                    <svg className="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">No fonts uploaded yet</h3>
                <p className="text-sm text-gray-500 mb-6">Upload your custom font files to get started</p>
                <button
                  onClick={() => setIsUploadFontsModalOpen(true)}
                  className="bg-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center gap-2 mx-auto"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  <span>Upload Fonts</span>
                </button>
              </div>
            )}
          </div>
        );
      case 'google-fonts':
        return (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">Google Fonts</h2>
              <button
                onClick={() => setActiveSection('fonts')}
                className="bg-gray-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-gray-700 transition-colors flex items-center gap-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span>Back to My Fonts</span>
              </button>
            </div>

            {/* Search and Filter */}
            <div className="mb-6">
              <div className="flex gap-4 mb-4">
                <div className="flex-1">
                  <input
                    type="text"
                    placeholder="Search Google Fonts..."
                    value={fontSearchQuery}
                    onChange={(e) => setFontSearchQuery(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                <select
                  value={fontCategory}
                  onChange={(e) => setFontCategory(e.target.value)}
                  className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="all">All Categories</option>
                  <option value="serif">Serif</option>
                  <option value="sans-serif">Sans Serif</option>
                  <option value="display">Display</option>
                  <option value="handwriting">Handwriting</option>
                  <option value="monospace">Monospace</option>
                </select>
              </div>
            </div>

            {loading ? (
              <div className="text-center py-20">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading Google Fonts...</p>
              </div>
            ) : googleFonts.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {googleFonts.map((font) => (
                  <div key={font.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-1">{font.family}</h3>
                        <p className="text-sm text-gray-500 capitalize">{font.category}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded">
                          Google
                        </span>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div 
                        className="text-2xl font-medium text-gray-900 mb-2"
                        style={{ fontFamily: font.family }}
                      >
                        Aa Bb Cc
                      </div>
                      <div 
                        className="text-sm text-gray-600"
                        style={{ fontFamily: font.family }}
                      >
                        The quick brown fox jumps over the lazy dog
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="text-xs text-gray-500">
                        {font.variants?.length || 0} variants
                      </div>
                      <button
                        onClick={() => {
                          // Add Google Font to library (simplified for now)
                          alert(`Added ${font.family} to your library!`);
                        }}
                        className="text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors"
                      >
                        Add to Library
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-20">
                <div className="w-32 h-32 mx-auto mb-8 bg-blue-50 rounded-2xl flex items-center justify-center">
                  <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center">
                    <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">No Google Fonts found</h3>
                <p className="text-sm text-gray-500 mb-6">Try adjusting your search or category filter</p>
              </div>
            )}
          </div>
        );
      case 'videos':
        return (
          <div className="text-center py-20">
            <div className="w-32 h-32 mx-auto mb-8 bg-blue-50 rounded-2xl flex items-center justify-center">
              <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center relative">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                <div className="absolute -bottom-1 -right-1 w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                  <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              </div>
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Set the scene for your story</h2>
            <p className="text-gray-600 max-w-md mx-auto mb-8">
              Put high-quality, reusable videos at everyone's fingertips. Your library makes it easy for anyone to add them to presentations.
            </p>
            <button className="bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-colors">
              Discover premium plans
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex">
        {/* Left Sidebar */}
        <div className="w-64 bg-white border-r border-gray-200 h-screen">
          <div className="p-6">
            <Link href="/dashboard" className="flex items-center text-gray-600 hover:text-gray-900 mb-6">
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              Back
            </Link>
            
            <h1 className="text-lg font-semibold text-gray-900 mb-6">Manage library</h1>
            
            <nav className="space-y-1">
              {sections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`w-full text-left px-3 py-2 text-sm font-medium rounded transition-all duration-200 flex items-center space-x-3 ${
                    activeSection === section.id
                      ? 'bg-gray-100 text-gray-900'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <div className="w-4 h-4 flex items-center justify-center">
                    {section.icon}
                  </div>
                  <span>{section.label}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 bg-white">
          <div className="p-8">
            <div className="flex items-center justify-between mb-8">
              <h1 className="text-3xl font-bold text-gray-900 capitalize">
                {activeSection}
              </h1>
              <button 
                onClick={() => activeSection === 'images' ? setIsUploadModalOpen(true) : null}
                className="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition-colors flex items-center space-x-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <span>Upload {activeSection}</span>
              </button>
            </div>
            
            {renderContent()}
          </div>
        </div>
      </div>

        {/* Upload Images Modal */}
        <UploadImagesModal
          isOpen={isUploadModalOpen}
          onClose={() => setIsUploadModalOpen(false)}
          onUpload={handleUpload}
        />

        {/* Upload Fonts Modal */}
        <UploadFontsModal
          isOpen={isUploadFontsModalOpen}
          onClose={() => {
            console.log('Closing upload fonts modal');
            setIsUploadFontsModalOpen(false);
          }}
          onUpload={handleFontUpload}
        />

        {/* Image Preview Modal */}
        {selectedImage && (
          <ImagePreviewModal
            isOpen={isPreviewModalOpen}
            onClose={() => {
              setIsPreviewModalOpen(false);
              setSelectedImage(null);
            }}
            image={selectedImage}
            onRename={handleRename}
            onDelete={handleDelete}
          />
        )}
      </div>
    );
  }
